//! Type definitions for YARA-X Node.js bindings.
//!
//! This module contains all the data structures used for interfacing between
//! Node.js and the YARA-X Rust library, including match results, compiler options,
//! and diagnostic information.

use napi::bindgen_prelude::Object;
use napi_derive::napi;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// A map of variable names to their values.
pub type VariableMap = HashMap<String, String>;

/// Represents a match found by a YARA rule pattern.
///
/// Contains information about where the match occurred and what data was matched.
#[napi(object)]
#[derive(Debug, Clone)]
pub struct MatchData {
  /// The offset of the match in the scanned data.
  pub offset: u32,
  /// The length of the matched data.
  pub length: u32,
  /// The matched data as a string.
  pub data: String,
  /// The identifier of the pattern that matched.
  pub identifier: String,
}

/// Represents a matching rule found during scanning.
///
/// Contains the rule's metadata, tags, and all pattern matches.
#[napi(object)]
pub struct RuleMatch<'a> {
  /// The identifier of the rule that matched.
  pub rule_identifier: String,
  /// The namespace of the rule that matched.
  pub namespace: String,
  /// The metadata associated with the rule that matched.
  pub meta: Object<'a>,
  /// The tags associated with the rule that matched.
  pub tags: Vec<String>,
  /// The matches found by the rule.
  pub matches: Vec<MatchData>,
}

/// Options for configuring the YARA compiler.
///
/// These options control various aspects of rule compilation including
/// module handling, optimization, and feature flags.
#[napi(object)]
pub struct CompilerOptions<'a> {
  /// Defines global variables for the YARA rules.
  pub define_variables: Option<Object<'a>>,
  /// A list of module names to ignore during compilation.
  pub ignore_modules: Option<Vec<String>>,
  /// A list of banned modules that cannot be used in the YARA rules.
  pub banned_modules: Option<Vec<BannedModule>>,
  /// A list of features to enable for the YARA rules.
  pub features: Option<Vec<String>>,
  /// Whether to use relaxed regular expression syntax.
  pub relaxed_re_syntax: Option<bool>,
  /// Whether to optimize conditions in the YARA rules.
  pub condition_optimization: Option<bool>,
  /// Whether to raise an error on slow patterns.
  pub error_on_slow_pattern: Option<bool>,
  /// Whether to raise an error on slow loops.
  pub error_on_slow_loop: Option<bool>,
  /// A list of directories where the compiler should look for included files.
  pub include_directories: Option<Vec<String>>,
  /// Whether to enable include statements in YARA rules.
  pub enable_includes: Option<bool>,
}

/// Represents a module that is banned from being used in YARA rules.
///
/// When a banned module is encountered, compilation will fail with the
/// specified error message.
#[napi(object)]
#[derive(Debug, Clone)]
pub struct BannedModule {
  /// The name of the banned module.
  pub name: String,
  /// The title of the error message if the module is used.
  pub error_title: String,
  /// The error message if the module is used.
  pub error_message: String,
}

/// Options for configuring scanning operations.
///
/// These options control resource usage and performance characteristics
/// during rule scanning.
#[napi(object)]
#[derive(Debug, Clone, Default)]
pub struct ScanOptions {
  /// Maximum number of matches per pattern. When a pattern reaches this limit, it won't produce more matches.
  pub max_matches_per_pattern: Option<u32>,
  /// Whether to use memory-mapped files for scanning. Disabling this is safer but slower.
  pub use_mmap: Option<bool>,
}

/// A warning generated by the YARA compiler.
///
/// Warnings indicate potential issues that don't prevent compilation
/// but may indicate problems with the rules.
#[napi(object)]
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct CompilerWarning {
  /// The code of the warning.
  pub code: String,
  /// The message of the warning.
  pub message: String,
  /// The source of the warning, if available.
  pub source: Option<String>,
  /// The line number where the warning occurred, if available.
  pub line: Option<u32>,
  /// The column number where the warning occurred, if available.
  pub column: Option<u32>,
}

/// An error generated by the YARA compiler.
///
/// Errors prevent successful compilation and must be resolved before
/// the rules can be used.
#[napi(object)]
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct CompilerError {
  /// The code of the error.
  pub code: String,
  /// The message of the error.
  pub message: String,
  /// The source of the error, if available.
  pub source: Option<String>,
  /// The line number where the error occurred, if available.
  pub line: Option<u32>,
  /// The column number where the error occurred, if available.
  pub column: Option<u32>,
}

/// The result of compiling YARA rules.
///
/// Contains any warnings or errors generated during the compilation process.
/// If errors are present, the compilation failed.
#[napi(object)]
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct CompileResult {
  /// Any warnings generated during the compilation process.
  pub warnings: Vec<CompilerWarning>,
  /// Any errors generated during the compilation process.
  pub errors: Vec<CompilerError>,
}
