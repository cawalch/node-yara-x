/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface MatchData {
  offset: number
  length: number
  data: string
  identifier: string
}
export interface RuleMatch {
  ruleIdentifier: string
  namespace: string
  meta: object
  tags: Array<string>
  matches: Array<MatchData>
}
export interface CompilerOptions {
  defineVariables?: object
  ignoreModules?: Array<string>
  bannedModules?: Array<BannedModule>
  features?: Array<string>
  relaxedReSyntax?: boolean
  conditionOptimization?: boolean
  errorOnSlowPattern?: boolean
  errorOnSlowLoop?: boolean
}
export interface BannedModule {
  name: string
  errorTitle: string
  errorMessage: string
}
export interface CompilerWarning {
  code: string
  message: string
  source?: string
  line?: number
  column?: number
}
export interface CompilerError {
  code: string
  message: string
  source?: string
  line?: number
  column?: number
}
export interface CompileResult {
  warnings: Array<CompilerWarning>
  errors: Array<CompilerError>
}
export declare function validate(ruleSource: string, options?: CompilerOptions | undefined | null): CompileResult
export declare function compile(ruleSource: string, options?: CompilerOptions | undefined | null): YaraX
export declare function create(): YaraX
export declare function fromFile(rulePath: string, options?: CompilerOptions | undefined | null): YaraX
export declare function compileToWasm(ruleSource: string, outputPath: string, options?: CompilerOptions | undefined | null): void
export declare function compileFileToWasm(rulePath: string, outputPath: string, options?: CompilerOptions | undefined | null): void
export declare class YaraX {
  getWarnings(): Array<CompilerWarning>
  scan(data: Buffer, variables?: Record<string, string | number>): Array<RuleMatch>
  scanFile(filePath: string, variables?: Record<string, string | number>): Array<RuleMatch>
  emitWasmFile(outputPath: string): void
  scanAsync(data: Buffer, variables?: object | undefined | null): Promise<unknown>
  scanFileAsync(filePath: string, variables?: object | undefined | null): Promise<unknown>
  emitWasmFileAsync(outputPath: string): Promise<unknown>
  addRuleSource(ruleSource: string): void
  addRuleFile(filePath: string): void
  defineVariable(name: string, value: string): void
}
